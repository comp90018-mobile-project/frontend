{"ast":null,"code":"import * as StaticViewConfigValidator from \"./StaticViewConfigValidator\";\nimport { createViewConfig } from \"./ViewConfig\";\nimport UIManager from \"../ReactNative/UIManager\";\nimport ReactNativeViewConfigRegistry from \"../Renderer/shims/ReactNativeViewConfigRegistry\";\nimport getNativeComponentAttributes from \"../ReactNative/getNativeComponentAttributes\";\nimport verifyComponentAttributeEquivalence from \"../Utilities/verifyComponentAttributeEquivalence\";\nimport invariant from 'invariant';\nimport * as React from 'react';\nvar getRuntimeConfig;\nvar componentNameToExists = new Map();\nexport function setRuntimeConfigProvider(runtimeConfigProvider) {\n  invariant(getRuntimeConfig == null, 'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.');\n  getRuntimeConfig = runtimeConfigProvider;\n}\nexport function get(name, viewConfigProvider) {\n  ReactNativeViewConfigRegistry.register(name, function () {\n    var _getRuntimeConfig;\n\n    var _ref = (_getRuntimeConfig = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig : {\n      native: true,\n      strict: false,\n      verify: false\n    },\n        native = _ref.native,\n        strict = _ref.strict,\n        verify = _ref.verify;\n\n    var viewConfig = native ? getNativeComponentAttributes(name) : createViewConfig(viewConfigProvider());\n\n    if (verify) {\n      var nativeViewConfig = native ? viewConfig : getNativeComponentAttributes(name);\n      var staticViewConfig = native ? createViewConfig(viewConfigProvider()) : viewConfig;\n\n      if (strict) {\n        var validationOutput = StaticViewConfigValidator.validate(name, nativeViewConfig, staticViewConfig);\n\n        if (validationOutput.type === 'invalid') {\n          console.error(StaticViewConfigValidator.stringifyValidationResult(name, validationOutput));\n        }\n      } else {\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\n      }\n    }\n\n    return viewConfig;\n  });\n  return name;\n}\nexport function getWithFallback_DEPRECATED(name, viewConfigProvider) {\n  if (getRuntimeConfig == null) {\n    if (hasNativeViewConfig(name)) {\n      return get(name, viewConfigProvider);\n    }\n  } else {\n    if (getRuntimeConfig(name) != null) {\n      return get(name, viewConfigProvider);\n    }\n  }\n\n  var FallbackNativeComponent = function FallbackNativeComponent(props) {\n    return null;\n  };\n\n  FallbackNativeComponent.displayName = \"Fallback(\" + name + \")\";\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name) {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\nexport function unstable_hasStaticViewConfig(name) {\n  var _getRuntimeConfig2;\n\n  var _ref2 = (_getRuntimeConfig2 = getRuntimeConfig == null ? void 0 : getRuntimeConfig(name)) != null ? _getRuntimeConfig2 : {\n    native: true\n  },\n      native = _ref2.native;\n\n  return !native;\n}","map":{"version":3,"names":["StaticViewConfigValidator","createViewConfig","UIManager","ReactNativeViewConfigRegistry","getNativeComponentAttributes","verifyComponentAttributeEquivalence","invariant","React","getRuntimeConfig","componentNameToExists","Map","setRuntimeConfigProvider","runtimeConfigProvider","get","name","viewConfigProvider","register","native","strict","verify","viewConfig","nativeViewConfig","staticViewConfig","validationOutput","validate","type","console","error","stringifyValidationResult","getWithFallback_DEPRECATED","hasNativeViewConfig","FallbackNativeComponent","props","displayName","getViewManagerConfig","unstable_hasStaticViewConfig"],"sources":["/Users/tangweijia/Desktop/mobile/team2/frontend/node_modules/react-native/Libraries/NativeComponent/NativeComponentRegistry.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\nimport * as StaticViewConfigValidator from './StaticViewConfigValidator';\nimport {createViewConfig} from './ViewConfig';\nimport UIManager from '../ReactNative/UIManager';\nimport type {\n  HostComponent,\n  PartialViewConfig,\n} from '../Renderer/shims/ReactNativeTypes';\nimport ReactNativeViewConfigRegistry from '../Renderer/shims/ReactNativeViewConfigRegistry';\nimport getNativeComponentAttributes from '../ReactNative/getNativeComponentAttributes';\nimport verifyComponentAttributeEquivalence from '../Utilities/verifyComponentAttributeEquivalence';\nimport invariant from 'invariant';\nimport * as React from 'react';\n\nlet getRuntimeConfig;\n\nlet componentNameToExists: Map<string, boolean> = new Map();\n\n/**\n * Configures a function that is called to determine whether a given component\n * should be registered using reflection of the native component at runtime.\n *\n * The provider should return null if the native component is unavailable in\n * the current environment.\n */\nexport function setRuntimeConfigProvider(\n  runtimeConfigProvider: (name: string) => ?{\n    native: boolean,\n    strict: boolean,\n    verify: boolean,\n  },\n): void {\n  invariant(\n    getRuntimeConfig == null,\n    'NativeComponentRegistry.setRuntimeConfigProvider() called more than once.',\n  );\n  getRuntimeConfig = runtimeConfigProvider;\n}\n\n/**\n * Gets a `NativeComponent` that can be rendered by React Native.\n *\n * The supplied `viewConfigProvider` may or may not be invoked and utilized,\n * depending on how `setRuntimeConfigProvider` is configured.\n */\nexport function get<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): HostComponent<Config> {\n  ReactNativeViewConfigRegistry.register(name, () => {\n    const {native, strict, verify} = getRuntimeConfig?.(name) ?? {\n      native: true,\n      strict: false,\n      verify: false,\n    };\n\n    const viewConfig = native\n      ? getNativeComponentAttributes(name)\n      : createViewConfig(viewConfigProvider());\n\n    if (verify) {\n      const nativeViewConfig = native\n        ? viewConfig\n        : getNativeComponentAttributes(name);\n      const staticViewConfig = native\n        ? createViewConfig(viewConfigProvider())\n        : viewConfig;\n\n      if (strict) {\n        const validationOutput = StaticViewConfigValidator.validate(\n          name,\n          nativeViewConfig,\n          staticViewConfig,\n        );\n\n        if (validationOutput.type === 'invalid') {\n          console.error(\n            StaticViewConfigValidator.stringifyValidationResult(\n              name,\n              validationOutput,\n            ),\n          );\n        }\n      } else {\n        verifyComponentAttributeEquivalence(nativeViewConfig, staticViewConfig);\n      }\n    }\n\n    return viewConfig;\n  });\n\n  // $FlowFixMe[incompatible-return] `NativeComponent` is actually string!\n  return name;\n}\n\n/**\n * Same as `NativeComponentRegistry.get(...)`, except this will check either\n * the `setRuntimeConfigProvider` configuration or use native reflection (slow)\n * to determine whether this native component is available.\n *\n * If the native component is not available, a stub component is returned. Note\n * that the return value of this is not `HostComponent` because the returned\n * component instance is not guaranteed to have native methods.\n */\nexport function getWithFallback_DEPRECATED<Config>(\n  name: string,\n  viewConfigProvider: () => PartialViewConfig,\n): React.AbstractComponent<Config> {\n  if (getRuntimeConfig == null) {\n    // `getRuntimeConfig == null` when static view configs are disabled\n    // If `setRuntimeConfigProvider` is not configured, use native reflection.\n    if (hasNativeViewConfig(name)) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  } else {\n    // If there is no runtime config, then the native component is unavailable.\n    if (getRuntimeConfig(name) != null) {\n      return get<Config>(name, viewConfigProvider);\n    }\n  }\n\n  const FallbackNativeComponent = function (props: Config): React.Node {\n    return null;\n  };\n  FallbackNativeComponent.displayName = `Fallback(${name})`;\n  return FallbackNativeComponent;\n}\n\nfunction hasNativeViewConfig(name: string): boolean {\n  invariant(getRuntimeConfig == null, 'Unexpected invocation!');\n  return UIManager.getViewManagerConfig(name) != null;\n}\n\n/**\n * Unstable API. Do not use!\n *\n * This method returns if there is a StaticViewConfig registered for the\n * component name received as a parameter.\n */\nexport function unstable_hasStaticViewConfig(name: string): boolean {\n  const {native} = getRuntimeConfig?.(name) ?? {\n    native: true,\n  };\n  return !native;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}