{"ast":null,"code":"'use strict';\n\nvar _extends = require(\"@babel/runtime/helpers/extends\");\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nvar ReactNativeStyleAttributes = require(\"../Components/View/ReactNativeStyleAttributes\");\n\nvar UIManager = require(\"./UIManager\");\n\nvar insetsDiffer = require(\"../Utilities/differ/insetsDiffer\");\n\nvar invariant = require('invariant');\n\nvar matricesDiffer = require(\"../Utilities/differ/matricesDiffer\");\n\nvar pointsDiffer = require(\"../Utilities/differ/pointsDiffer\");\n\nvar processColor = require(\"../StyleSheet/processColor\");\n\nvar processColorArray = require(\"../StyleSheet/processColorArray\");\n\nvar resolveAssetSource = require(\"../Image/resolveAssetSource\");\n\nvar sizesDiffer = require(\"../Utilities/differ/sizesDiffer\");\n\nfunction getNativeComponentAttributes(uiViewClassName) {\n  var _bubblingEventTypes, _directEventTypes;\n\n  var viewConfig = UIManager.getViewManagerConfig(uiViewClassName);\n  invariant(viewConfig != null && viewConfig.NativeProps != null, 'requireNativeComponent: \"%s\" was not found in the UIManager.', uiViewClassName);\n  var baseModuleName = viewConfig.baseModuleName,\n      bubblingEventTypes = viewConfig.bubblingEventTypes,\n      directEventTypes = viewConfig.directEventTypes;\n  var nativeProps = viewConfig.NativeProps;\n  bubblingEventTypes = (_bubblingEventTypes = bubblingEventTypes) != null ? _bubblingEventTypes : {};\n  directEventTypes = (_directEventTypes = directEventTypes) != null ? _directEventTypes : {};\n\n  while (baseModuleName) {\n    var baseModule = UIManager.getViewManagerConfig(baseModuleName);\n\n    if (!baseModule) {\n      baseModuleName = null;\n    } else {\n      bubblingEventTypes = _objectSpread(_objectSpread({}, baseModule.bubblingEventTypes), bubblingEventTypes);\n      directEventTypes = _objectSpread(_objectSpread({}, baseModule.directEventTypes), directEventTypes);\n      nativeProps = _objectSpread(_objectSpread({}, baseModule.NativeProps), nativeProps);\n      baseModuleName = baseModule.baseModuleName;\n    }\n  }\n\n  var validAttributes = {};\n\n  for (var key in nativeProps) {\n    var typeName = nativeProps[key];\n    var diff = getDifferForType(typeName);\n    var process = getProcessorForType(typeName);\n    validAttributes[key] = diff == null ? process == null ? true : {\n      process: process\n    } : process == null ? {\n      diff: diff\n    } : {\n      diff: diff,\n      process: process\n    };\n  }\n\n  validAttributes.style = ReactNativeStyleAttributes;\n\n  _extends(viewConfig, {\n    uiViewClassName: uiViewClassName,\n    validAttributes: validAttributes,\n    bubblingEventTypes: bubblingEventTypes,\n    directEventTypes: directEventTypes\n  });\n\n  attachDefaultEventTypes(viewConfig);\n  return viewConfig;\n}\n\nfunction attachDefaultEventTypes(viewConfig) {\n  var constants = UIManager.getConstants();\n\n  if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {\n    viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());\n  } else {\n    viewConfig.bubblingEventTypes = merge(viewConfig.bubblingEventTypes, constants.genericBubblingEventTypes);\n    viewConfig.directEventTypes = merge(viewConfig.directEventTypes, constants.genericDirectEventTypes);\n  }\n}\n\nfunction merge(destination, source) {\n  if (!source) {\n    return destination;\n  }\n\n  if (!destination) {\n    return source;\n  }\n\n  for (var key in source) {\n    if (!source.hasOwnProperty(key)) {\n      continue;\n    }\n\n    var sourceValue = source[key];\n\n    if (destination.hasOwnProperty(key)) {\n      var destinationValue = destination[key];\n\n      if (typeof sourceValue === 'object' && typeof destinationValue === 'object') {\n        sourceValue = merge(destinationValue, sourceValue);\n      }\n    }\n\n    destination[key] = sourceValue;\n  }\n\n  return destination;\n}\n\nfunction getDifferForType(typeName) {\n  switch (typeName) {\n    case 'CATransform3D':\n      return matricesDiffer;\n\n    case 'CGPoint':\n      return pointsDiffer;\n\n    case 'CGSize':\n      return sizesDiffer;\n\n    case 'UIEdgeInsets':\n      return insetsDiffer;\n\n    case 'Point':\n      return pointsDiffer;\n\n    case 'EdgeInsets':\n      return insetsDiffer;\n  }\n\n  return null;\n}\n\nfunction getProcessorForType(typeName) {\n  switch (typeName) {\n    case 'CGColor':\n    case 'UIColor':\n      return processColor;\n\n    case 'CGColorArray':\n    case 'UIColorArray':\n      return processColorArray;\n\n    case 'CGImage':\n    case 'UIImage':\n    case 'RCTImageSource':\n      return resolveAssetSource;\n\n    case 'Color':\n      return processColor;\n\n    case 'ColorArray':\n      return processColorArray;\n\n    case 'ImageSource':\n      return resolveAssetSource;\n  }\n\n  return null;\n}\n\nmodule.exports = getNativeComponentAttributes;","map":{"version":3,"names":["ReactNativeStyleAttributes","require","UIManager","insetsDiffer","invariant","matricesDiffer","pointsDiffer","processColor","processColorArray","resolveAssetSource","sizesDiffer","getNativeComponentAttributes","uiViewClassName","viewConfig","getViewManagerConfig","NativeProps","baseModuleName","bubblingEventTypes","directEventTypes","nativeProps","baseModule","validAttributes","key","typeName","diff","getDifferForType","process","getProcessorForType","style","attachDefaultEventTypes","constants","getConstants","ViewManagerNames","LazyViewManagersEnabled","merge","getDefaultEventTypes","genericBubblingEventTypes","genericDirectEventTypes","destination","source","hasOwnProperty","sourceValue","destinationValue","module","exports"],"sources":["/Users/tangweijia/Desktop/mobile/team2/frontend/node_modules/react-native/Libraries/ReactNative/getNativeComponentAttributes.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n'use strict';\n\nconst ReactNativeStyleAttributes = require('../Components/View/ReactNativeStyleAttributes');\nconst UIManager = require('./UIManager');\n\nconst insetsDiffer = require('../Utilities/differ/insetsDiffer');\nconst invariant = require('invariant');\nconst matricesDiffer = require('../Utilities/differ/matricesDiffer');\nconst pointsDiffer = require('../Utilities/differ/pointsDiffer');\nconst processColor = require('../StyleSheet/processColor');\nconst processColorArray = require('../StyleSheet/processColorArray');\nconst resolveAssetSource = require('../Image/resolveAssetSource');\nconst sizesDiffer = require('../Utilities/differ/sizesDiffer');\n\nfunction getNativeComponentAttributes(uiViewClassName: string): any {\n  const viewConfig = UIManager.getViewManagerConfig(uiViewClassName);\n\n  invariant(\n    viewConfig != null && viewConfig.NativeProps != null,\n    'requireNativeComponent: \"%s\" was not found in the UIManager.',\n    uiViewClassName,\n  );\n\n  // TODO: This seems like a whole lot of runtime initialization for every\n  // native component that can be either avoided or simplified.\n  let {baseModuleName, bubblingEventTypes, directEventTypes} = viewConfig;\n  let nativeProps = viewConfig.NativeProps;\n\n  bubblingEventTypes = bubblingEventTypes ?? {};\n  directEventTypes = directEventTypes ?? {};\n\n  while (baseModuleName) {\n    const baseModule = UIManager.getViewManagerConfig(baseModuleName);\n    if (!baseModule) {\n      baseModuleName = null;\n    } else {\n      bubblingEventTypes = {\n        ...baseModule.bubblingEventTypes,\n        ...bubblingEventTypes,\n      };\n      directEventTypes = {\n        ...baseModule.directEventTypes,\n        ...directEventTypes,\n      };\n      nativeProps = {\n        ...baseModule.NativeProps,\n        ...nativeProps,\n      };\n      baseModuleName = baseModule.baseModuleName;\n    }\n  }\n\n  const validAttributes = {};\n\n  for (const key in nativeProps) {\n    const typeName = nativeProps[key];\n    const diff = getDifferForType(typeName);\n    const process = getProcessorForType(typeName);\n\n    // If diff or process == null, omit the corresponding property from the Attribute\n    // Why:\n    //  1. Consistency with AttributeType flow type\n    //  2. Consistency with Static View Configs, which omit the null properties\n    validAttributes[key] =\n      diff == null\n        ? process == null\n          ? true\n          : {process}\n        : process == null\n        ? {diff}\n        : {diff, process};\n  }\n\n  // Unfortunately, the current setup declares style properties as top-level\n  // props. This makes it so we allow style properties in the `style` prop.\n  // TODO: Move style properties into a `style` prop and disallow them as\n  // top-level props on the native side.\n  validAttributes.style = ReactNativeStyleAttributes;\n\n  Object.assign(viewConfig, {\n    uiViewClassName,\n    validAttributes,\n    bubblingEventTypes,\n    directEventTypes,\n  });\n\n  attachDefaultEventTypes(viewConfig);\n\n  return viewConfig;\n}\n\nfunction attachDefaultEventTypes(viewConfig: any) {\n  // This is supported on UIManager platforms (ex: Android),\n  // as lazy view managers are not implemented for all platforms.\n  // See [UIManager] for details on constants and implementations.\n  const constants = UIManager.getConstants();\n  if (constants.ViewManagerNames || constants.LazyViewManagersEnabled) {\n    // Lazy view managers enabled.\n    viewConfig = merge(viewConfig, UIManager.getDefaultEventTypes());\n  } else {\n    viewConfig.bubblingEventTypes = merge(\n      viewConfig.bubblingEventTypes,\n      constants.genericBubblingEventTypes,\n    );\n    viewConfig.directEventTypes = merge(\n      viewConfig.directEventTypes,\n      constants.genericDirectEventTypes,\n    );\n  }\n}\n\n// TODO: Figure out how to avoid all this runtime initialization cost.\nfunction merge(destination: ?Object, source: ?Object): ?Object {\n  if (!source) {\n    return destination;\n  }\n  if (!destination) {\n    return source;\n  }\n\n  for (const key in source) {\n    if (!source.hasOwnProperty(key)) {\n      continue;\n    }\n\n    let sourceValue = source[key];\n    if (destination.hasOwnProperty(key)) {\n      const destinationValue = destination[key];\n      if (\n        typeof sourceValue === 'object' &&\n        typeof destinationValue === 'object'\n      ) {\n        sourceValue = merge(destinationValue, sourceValue);\n      }\n    }\n    destination[key] = sourceValue;\n  }\n  return destination;\n}\n\nfunction getDifferForType(\n  typeName: string,\n): ?(prevProp: any, nextProp: any) => boolean {\n  switch (typeName) {\n    // iOS Types\n    case 'CATransform3D':\n      return matricesDiffer;\n    case 'CGPoint':\n      return pointsDiffer;\n    case 'CGSize':\n      return sizesDiffer;\n    case 'UIEdgeInsets':\n      return insetsDiffer;\n    // Android Types\n    case 'Point':\n      return pointsDiffer;\n    case 'EdgeInsets':\n      return insetsDiffer;\n  }\n  return null;\n}\n\nfunction getProcessorForType(typeName: string): ?(nextProp: any) => any {\n  switch (typeName) {\n    // iOS Types\n    case 'CGColor':\n    case 'UIColor':\n      return processColor;\n    case 'CGColorArray':\n    case 'UIColorArray':\n      return processColorArray;\n    case 'CGImage':\n    case 'UIImage':\n    case 'RCTImageSource':\n      return resolveAssetSource;\n    // Android Types\n    case 'Color':\n      return processColor;\n    case 'ColorArray':\n      return processColorArray;\n    case 'ImageSource':\n      return resolveAssetSource;\n  }\n  return null;\n}\n\nmodule.exports = getNativeComponentAttributes;\n"],"mappings":"AAUA;;;;;;;;;;AAEA,IAAMA,0BAA0B,GAAGC,OAAO,iDAA1C;;AACA,IAAMC,SAAS,GAAGD,OAAO,eAAzB;;AAEA,IAAME,YAAY,GAAGF,OAAO,oCAA5B;;AACA,IAAMG,SAAS,GAAGH,OAAO,CAAC,WAAD,CAAzB;;AACA,IAAMI,cAAc,GAAGJ,OAAO,sCAA9B;;AACA,IAAMK,YAAY,GAAGL,OAAO,oCAA5B;;AACA,IAAMM,YAAY,GAAGN,OAAO,8BAA5B;;AACA,IAAMO,iBAAiB,GAAGP,OAAO,mCAAjC;;AACA,IAAMQ,kBAAkB,GAAGR,OAAO,+BAAlC;;AACA,IAAMS,WAAW,GAAGT,OAAO,mCAA3B;;AAEA,SAASU,4BAAT,CAAsCC,eAAtC,EAAoE;EAAA;;EAClE,IAAMC,UAAU,GAAGX,SAAS,CAACY,oBAAV,CAA+BF,eAA/B,CAAnB;EAEAR,SAAS,CACPS,UAAU,IAAI,IAAd,IAAsBA,UAAU,CAACE,WAAX,IAA0B,IADzC,EAEP,8DAFO,EAGPH,eAHO,CAAT;EAQA,IAAKI,cAAL,GAA6DH,UAA7D,CAAKG,cAAL;EAAA,IAAqBC,kBAArB,GAA6DJ,UAA7D,CAAqBI,kBAArB;EAAA,IAAyCC,gBAAzC,GAA6DL,UAA7D,CAAyCK,gBAAzC;EACA,IAAIC,WAAW,GAAGN,UAAU,CAACE,WAA7B;EAEAE,kBAAkB,0BAAGA,kBAAH,kCAAyB,EAA3C;EACAC,gBAAgB,wBAAGA,gBAAH,gCAAuB,EAAvC;;EAEA,OAAOF,cAAP,EAAuB;IACrB,IAAMI,UAAU,GAAGlB,SAAS,CAACY,oBAAV,CAA+BE,cAA/B,CAAnB;;IACA,IAAI,CAACI,UAAL,EAAiB;MACfJ,cAAc,GAAG,IAAjB;IACD,CAFD,MAEO;MACLC,kBAAkB,mCACbG,UAAU,CAACH,kBADE,GAEbA,kBAFa,CAAlB;MAIAC,gBAAgB,mCACXE,UAAU,CAACF,gBADA,GAEXA,gBAFW,CAAhB;MAIAC,WAAW,mCACNC,UAAU,CAACL,WADL,GAENI,WAFM,CAAX;MAIAH,cAAc,GAAGI,UAAU,CAACJ,cAA5B;IACD;EACF;;EAED,IAAMK,eAAe,GAAG,EAAxB;;EAEA,KAAK,IAAMC,GAAX,IAAkBH,WAAlB,EAA+B;IAC7B,IAAMI,QAAQ,GAAGJ,WAAW,CAACG,GAAD,CAA5B;IACA,IAAME,IAAI,GAAGC,gBAAgB,CAACF,QAAD,CAA7B;IACA,IAAMG,OAAO,GAAGC,mBAAmB,CAACJ,QAAD,CAAnC;IAMAF,eAAe,CAACC,GAAD,CAAf,GACEE,IAAI,IAAI,IAAR,GACIE,OAAO,IAAI,IAAX,GACE,IADF,GAEE;MAACA,OAAO,EAAPA;IAAD,CAHN,GAIIA,OAAO,IAAI,IAAX,GACA;MAACF,IAAI,EAAJA;IAAD,CADA,GAEA;MAACA,IAAI,EAAJA,IAAD;MAAOE,OAAO,EAAPA;IAAP,CAPN;EAQD;;EAMDL,eAAe,CAACO,KAAhB,GAAwB5B,0BAAxB;;EAEA,SAAca,UAAd,EAA0B;IACxBD,eAAe,EAAfA,eADwB;IAExBS,eAAe,EAAfA,eAFwB;IAGxBJ,kBAAkB,EAAlBA,kBAHwB;IAIxBC,gBAAgB,EAAhBA;EAJwB,CAA1B;;EAOAW,uBAAuB,CAAChB,UAAD,CAAvB;EAEA,OAAOA,UAAP;AACD;;AAED,SAASgB,uBAAT,CAAiChB,UAAjC,EAAkD;EAIhD,IAAMiB,SAAS,GAAG5B,SAAS,CAAC6B,YAAV,EAAlB;;EACA,IAAID,SAAS,CAACE,gBAAV,IAA8BF,SAAS,CAACG,uBAA5C,EAAqE;IAEnEpB,UAAU,GAAGqB,KAAK,CAACrB,UAAD,EAAaX,SAAS,CAACiC,oBAAV,EAAb,CAAlB;EACD,CAHD,MAGO;IACLtB,UAAU,CAACI,kBAAX,GAAgCiB,KAAK,CACnCrB,UAAU,CAACI,kBADwB,EAEnCa,SAAS,CAACM,yBAFyB,CAArC;IAIAvB,UAAU,CAACK,gBAAX,GAA8BgB,KAAK,CACjCrB,UAAU,CAACK,gBADsB,EAEjCY,SAAS,CAACO,uBAFuB,CAAnC;EAID;AACF;;AAGD,SAASH,KAAT,CAAeI,WAAf,EAAqCC,MAArC,EAA+D;EAC7D,IAAI,CAACA,MAAL,EAAa;IACX,OAAOD,WAAP;EACD;;EACD,IAAI,CAACA,WAAL,EAAkB;IAChB,OAAOC,MAAP;EACD;;EAED,KAAK,IAAMjB,GAAX,IAAkBiB,MAAlB,EAA0B;IACxB,IAAI,CAACA,MAAM,CAACC,cAAP,CAAsBlB,GAAtB,CAAL,EAAiC;MAC/B;IACD;;IAED,IAAImB,WAAW,GAAGF,MAAM,CAACjB,GAAD,CAAxB;;IACA,IAAIgB,WAAW,CAACE,cAAZ,CAA2BlB,GAA3B,CAAJ,EAAqC;MACnC,IAAMoB,gBAAgB,GAAGJ,WAAW,CAAChB,GAAD,CAApC;;MACA,IACE,OAAOmB,WAAP,KAAuB,QAAvB,IACA,OAAOC,gBAAP,KAA4B,QAF9B,EAGE;QACAD,WAAW,GAAGP,KAAK,CAACQ,gBAAD,EAAmBD,WAAnB,CAAnB;MACD;IACF;;IACDH,WAAW,CAAChB,GAAD,CAAX,GAAmBmB,WAAnB;EACD;;EACD,OAAOH,WAAP;AACD;;AAED,SAASb,gBAAT,CACEF,QADF,EAE8C;EAC5C,QAAQA,QAAR;IAEE,KAAK,eAAL;MACE,OAAOlB,cAAP;;IACF,KAAK,SAAL;MACE,OAAOC,YAAP;;IACF,KAAK,QAAL;MACE,OAAOI,WAAP;;IACF,KAAK,cAAL;MACE,OAAOP,YAAP;;IAEF,KAAK,OAAL;MACE,OAAOG,YAAP;;IACF,KAAK,YAAL;MACE,OAAOH,YAAP;EAdJ;;EAgBA,OAAO,IAAP;AACD;;AAED,SAASwB,mBAAT,CAA6BJ,QAA7B,EAAwE;EACtE,QAAQA,QAAR;IAEE,KAAK,SAAL;IACA,KAAK,SAAL;MACE,OAAOhB,YAAP;;IACF,KAAK,cAAL;IACA,KAAK,cAAL;MACE,OAAOC,iBAAP;;IACF,KAAK,SAAL;IACA,KAAK,SAAL;IACA,KAAK,gBAAL;MACE,OAAOC,kBAAP;;IAEF,KAAK,OAAL;MACE,OAAOF,YAAP;;IACF,KAAK,YAAL;MACE,OAAOC,iBAAP;;IACF,KAAK,aAAL;MACE,OAAOC,kBAAP;EAlBJ;;EAoBA,OAAO,IAAP;AACD;;AAEDkC,MAAM,CAACC,OAAP,GAAiBjC,4BAAjB"},"metadata":{},"sourceType":"script"}