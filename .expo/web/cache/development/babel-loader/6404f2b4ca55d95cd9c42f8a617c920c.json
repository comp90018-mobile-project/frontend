{"ast":null,"code":"import Platform from \"../Utilities/Platform\";\nimport RCTLog from \"../Utilities/RCTLog\";\nvar LogBox;\n\nif (__DEV__) {\n  var LogBoxData = require(\"./Data/LogBoxData\");\n\n  var _require = require(\"./Data/parseLogBoxLog\"),\n      parseLogBoxLog = _require.parseLogBoxLog,\n      parseInterpolation = _require.parseInterpolation;\n\n  var originalConsoleError;\n  var originalConsoleWarn;\n  var consoleErrorImpl;\n  var consoleWarnImpl;\n  var isLogBoxInstalled = false;\n  LogBox = {\n    install: function install() {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      require(\"../NativeModules/specs/NativeLogBox\");\n\n      var isFirstInstall = originalConsoleError == null;\n\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        originalConsoleWarn = console.warn.bind(console);\n\n        console.error = function () {\n          consoleErrorImpl.apply(void 0, arguments);\n        };\n\n        console.warn = function () {\n          consoleWarnImpl.apply(void 0, arguments);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n      consoleWarnImpl = registerWarning;\n\n      if (console.disableYellowBox === true) {\n        LogBoxData.setDisabled(true);\n        console.warn('console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.');\n      }\n\n      Object.defineProperty(console, 'disableYellowBox', {\n        configurable: true,\n        get: function get() {\n          return LogBoxData.isDisabled();\n        },\n        set: function set(value) {\n          LogBoxData.setDisabled(value);\n          console.warn('console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.');\n        }\n      });\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n\n      RCTLog.setWarningHandler(function () {\n        registerWarning.apply(void 0, arguments);\n      });\n    },\n    uninstall: function uninstall() {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n      consoleErrorImpl = originalConsoleError;\n      consoleWarnImpl = originalConsoleWarn;\n      delete console.disableLogBox;\n    },\n    isInstalled: function isInstalled() {\n      return isLogBoxInstalled;\n    },\n    ignoreLogs: function ignoreLogs(patterns) {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n    ignoreAllLogs: function ignoreAllLogs(value) {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n    clearAllLogs: function clearAllLogs() {\n      LogBoxData.clear();\n    },\n    addLog: function addLog(log) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n    addException: function addException(error) {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    }\n  };\n\n  var isRCTLogAdviceWarning = function isRCTLogAdviceWarning() {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n\n  var isWarningModuleWarning = function isWarningModuleWarning() {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  var registerWarning = function registerWarning() {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      originalConsoleError.apply(void 0, args);\n      return;\n    }\n\n    try {\n      if (!isRCTLogAdviceWarning.apply(void 0, args)) {\n        var _parseLogBoxLog = parseLogBoxLog(args),\n            category = _parseLogBoxLog.category,\n            message = _parseLogBoxLog.message,\n            componentStack = _parseLogBoxLog.componentStack;\n\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          originalConsoleWarn.apply(void 0, args);\n          LogBoxData.addLog({\n            level: 'warn',\n            category: category,\n            message: message,\n            componentStack: componentStack\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n\n  var registerError = function registerError() {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError.apply(void 0, args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning.apply(void 0, args)) {\n        originalConsoleError.apply(void 0, args);\n        return;\n      }\n\n      var format = args[0].replace('Warning: ', '');\n      var filterResult = LogBoxData.checkWarningFilter(format);\n\n      if (filterResult.suppressCompletely) {\n        return;\n      }\n\n      var level = 'error';\n\n      if (filterResult.suppressDialog_LEGACY === true) {\n        level = 'warn';\n      } else if (filterResult.forceDialogImmediately === true) {\n        level = 'fatal';\n      }\n\n      args[0] = \"Warning: \" + filterResult.finalFormat;\n\n      var _parseLogBoxLog2 = parseLogBoxLog(args),\n          category = _parseLogBoxLog2.category,\n          message = _parseLogBoxLog2.message,\n          componentStack = _parseLogBoxLog2.componentStack;\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        var interpolated = parseInterpolation(args);\n        originalConsoleError(interpolated.message.content);\n        LogBoxData.addLog({\n          level: level,\n          category: category,\n          message: message,\n          componentStack: componentStack\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install: function install() {},\n    uninstall: function uninstall() {},\n    isInstalled: function isInstalled() {\n      return false;\n    },\n    ignoreLogs: function ignoreLogs(patterns) {},\n    ignoreAllLogs: function ignoreAllLogs(value) {},\n    clearAllLogs: function clearAllLogs() {},\n    addLog: function addLog(log) {},\n    addException: function addException(error) {}\n  };\n}\n\nmodule.exports = LogBox;","map":{"version":3,"names":["Platform","RCTLog","LogBox","__DEV__","LogBoxData","require","parseLogBoxLog","parseInterpolation","originalConsoleError","originalConsoleWarn","consoleErrorImpl","consoleWarnImpl","isLogBoxInstalled","install","isFirstInstall","console","error","bind","warn","registerError","registerWarning","disableYellowBox","setDisabled","Object","defineProperty","configurable","get","isDisabled","set","value","isTesting","setWarningHandler","uninstall","disableLogBox","isInstalled","ignoreLogs","patterns","addIgnorePatterns","ignoreAllLogs","clearAllLogs","clear","addLog","log","addException","isRCTLogAdviceWarning","args","startsWith","isWarningModuleWarning","isLogBoxErrorMessage","String","category","message","componentStack","isMessageIgnored","content","level","err","reportLogBoxError","format","replace","filterResult","checkWarningFilter","suppressCompletely","suppressDialog_LEGACY","forceDialogImmediately","finalFormat","interpolated","module","exports"],"sources":["/Users/tangweijia/Desktop/mobile/team2/frontend/node_modules/react-native/Libraries/LogBox/LogBox.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\nimport Platform from '../Utilities/Platform';\nimport RCTLog from '../Utilities/RCTLog';\n\nimport type {IgnorePattern, LogData} from './Data/LogBoxData';\nimport type {ExtendedExceptionData} from './Data/parseLogBoxLog';\n\nexport type {LogData, ExtendedExceptionData, IgnorePattern};\n\nlet LogBox;\n\ninterface ILogBox {\n  install(): void;\n  uninstall(): void;\n  isInstalled(): boolean;\n  ignoreLogs($ReadOnlyArray<IgnorePattern>): void;\n  ignoreAllLogs(?boolean): void;\n  clearAllLogs(): void;\n  addLog(log: LogData): void;\n  addException(error: ExtendedExceptionData): void;\n}\n\n/**\n * LogBox displays logs in the app.\n */\nif (__DEV__) {\n  const LogBoxData = require('./Data/LogBoxData');\n  const {parseLogBoxLog, parseInterpolation} = require('./Data/parseLogBoxLog');\n\n  let originalConsoleError;\n  let originalConsoleWarn;\n  let consoleErrorImpl;\n  let consoleWarnImpl;\n\n  let isLogBoxInstalled: boolean = false;\n\n  LogBox = {\n    install(): void {\n      if (isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = true;\n\n      // Trigger lazy initialization of module.\n      require('../NativeModules/specs/NativeLogBox');\n\n      // IMPORTANT: we only overwrite `console.error` and `console.warn` once.\n      // When we uninstall we keep the same reference and only change its\n      // internal implementation\n      const isFirstInstall = originalConsoleError == null;\n      if (isFirstInstall) {\n        originalConsoleError = console.error.bind(console);\n        originalConsoleWarn = console.warn.bind(console);\n\n        // $FlowExpectedError[cannot-write]\n        console.error = (...args) => {\n          consoleErrorImpl(...args);\n        };\n        // $FlowExpectedError[cannot-write]\n        console.warn = (...args) => {\n          consoleWarnImpl(...args);\n        };\n      }\n\n      consoleErrorImpl = registerError;\n      consoleWarnImpl = registerWarning;\n\n      if ((console: any).disableYellowBox === true) {\n        LogBoxData.setDisabled(true);\n        console.warn(\n          'console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.',\n        );\n      }\n\n      (Object.defineProperty: any)(console, 'disableYellowBox', {\n        configurable: true,\n        get: () => LogBoxData.isDisabled(),\n        set: value => {\n          LogBoxData.setDisabled(value);\n          console.warn(\n            'console.disableYellowBox has been deprecated and will be removed in a future release. Please use LogBox.ignoreAllLogs(value) instead.',\n          );\n        },\n      });\n\n      if (Platform.isTesting) {\n        LogBoxData.setDisabled(true);\n      }\n\n      RCTLog.setWarningHandler((...args) => {\n        registerWarning(...args);\n      });\n    },\n\n    uninstall(): void {\n      if (!isLogBoxInstalled) {\n        return;\n      }\n\n      isLogBoxInstalled = false;\n\n      // IMPORTANT: we don't re-assign to `console` in case the method has been\n      // decorated again after installing LogBox. E.g.:\n      // Before uninstalling: original > LogBox > OtherErrorHandler\n      // After uninstalling:  original > LogBox (noop) > OtherErrorHandler\n      consoleErrorImpl = originalConsoleError;\n      consoleWarnImpl = originalConsoleWarn;\n      delete (console: any).disableLogBox;\n    },\n\n    isInstalled(): boolean {\n      return isLogBoxInstalled;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      LogBoxData.addIgnorePatterns(patterns);\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      LogBoxData.setDisabled(value == null ? true : value);\n    },\n\n    clearAllLogs(): void {\n      LogBoxData.clear();\n    },\n\n    addLog(log: LogData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addLog(log);\n      }\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      if (isLogBoxInstalled) {\n        LogBoxData.addException(error);\n      }\n    },\n  };\n\n  const isRCTLogAdviceWarning = (...args: Array<mixed>) => {\n    // RCTLogAdvice is a native logging function designed to show users\n    // a message in the console, but not show it to them in Logbox.\n    return typeof args[0] === 'string' && args[0].startsWith('(ADVICE)');\n  };\n\n  const isWarningModuleWarning = (...args: any) => {\n    return typeof args[0] === 'string' && args[0].startsWith('Warning: ');\n  };\n\n  const registerWarning = (...args: Array<mixed>): void => {\n    // Let warnings within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(String(args[0]))) {\n      originalConsoleError(...args);\n      return;\n    }\n\n    try {\n      if (!isRCTLogAdviceWarning(...args)) {\n        const {category, message, componentStack} = parseLogBoxLog(args);\n\n        if (!LogBoxData.isMessageIgnored(message.content)) {\n          // Be sure to pass LogBox warnings through.\n          originalConsoleWarn(...args);\n\n          LogBoxData.addLog({\n            level: 'warn',\n            category,\n            message,\n            componentStack,\n          });\n        }\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n\n  const registerError = (...args): void => {\n    // Let errors within LogBox itself fall through.\n    if (LogBoxData.isLogBoxErrorMessage(args[0])) {\n      originalConsoleError(...args);\n      return;\n    }\n\n    try {\n      if (!isWarningModuleWarning(...args)) {\n        // Only show LogBox for the 'warning' module, otherwise pass through.\n        // By passing through, this will get picked up by the React console override,\n        // potentially adding the component stack. React then passes it back to the\n        // React Native ExceptionsManager, which reports it to LogBox as an error.\n        //\n        // The 'warning' module needs to be handled here because React internally calls\n        // `console.error('Warning: ')` with the component stack already included.\n        originalConsoleError(...args);\n        return;\n      }\n\n      const format = args[0].replace('Warning: ', '');\n      const filterResult = LogBoxData.checkWarningFilter(format);\n      if (filterResult.suppressCompletely) {\n        return;\n      }\n\n      let level = 'error';\n      if (filterResult.suppressDialog_LEGACY === true) {\n        level = 'warn';\n      } else if (filterResult.forceDialogImmediately === true) {\n        level = 'fatal'; // Do not downgrade. These are real bugs with same severity as throws.\n      }\n\n      // Unfortunately, we need to add the Warning: prefix back for downstream dependencies.\n      args[0] = `Warning: ${filterResult.finalFormat}`;\n      const {category, message, componentStack} = parseLogBoxLog(args);\n\n      if (!LogBoxData.isMessageIgnored(message.content)) {\n        // Interpolate the message so they are formatted for adb and other CLIs.\n        // This is different than the message.content above because it includes component stacks.\n        const interpolated = parseInterpolation(args);\n        originalConsoleError(interpolated.message.content);\n\n        LogBoxData.addLog({\n          level,\n          category,\n          message,\n          componentStack,\n        });\n      }\n    } catch (err) {\n      LogBoxData.reportLogBoxError(err);\n    }\n  };\n} else {\n  LogBox = {\n    install(): void {\n      // Do nothing.\n    },\n\n    uninstall(): void {\n      // Do nothing.\n    },\n\n    isInstalled(): boolean {\n      return false;\n    },\n\n    ignoreLogs(patterns: $ReadOnlyArray<IgnorePattern>): void {\n      // Do nothing.\n    },\n\n    ignoreAllLogs(value?: ?boolean): void {\n      // Do nothing.\n    },\n\n    clearAllLogs(): void {\n      // Do nothing.\n    },\n\n    addLog(log: LogData): void {\n      // Do nothing.\n    },\n\n    addException(error: ExtendedExceptionData): void {\n      // Do nothing.\n    },\n  };\n}\n\nmodule.exports = (LogBox: ILogBox);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}