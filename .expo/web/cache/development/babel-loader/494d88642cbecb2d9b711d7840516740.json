{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useCallbackOne, useMemoOne } from 'use-memo-one';\nimport Color from \"./Color\";\nimport { StylePropType } from \"./utils\";\nimport { TEST_ID } from \"./Constant\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar styles = StyleSheet.create({\n  container: {\n    height: 44,\n    justifyContent: 'flex-end'\n  },\n  text: {\n    color: Color.defaultBlue,\n    fontWeight: '600',\n    fontSize: 17,\n    backgroundColor: Color.backgroundTransparent,\n    marginBottom: 12,\n    marginLeft: 10,\n    marginRight: 10\n  }\n});\nexport var Send = function Send(_ref) {\n  var _ref$text = _ref.text,\n      text = _ref$text === void 0 ? '' : _ref$text,\n      containerStyle = _ref.containerStyle,\n      children = _ref.children,\n      textStyle = _ref.textStyle,\n      _ref$label = _ref.label,\n      label = _ref$label === void 0 ? 'Send' : _ref$label,\n      _ref$alwaysShowSend = _ref.alwaysShowSend,\n      alwaysShowSend = _ref$alwaysShowSend === void 0 ? false : _ref$alwaysShowSend,\n      _ref$disabled = _ref.disabled,\n      disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n      sendButtonProps = _ref.sendButtonProps,\n      _ref$onSend = _ref.onSend,\n      onSend = _ref$onSend === void 0 ? function () {} : _ref$onSend;\n  var handleOnPress = useCallbackOne(function () {\n    if (text && onSend) {\n      onSend({\n        text: text.trim()\n      }, true);\n    }\n  }, [text, onSend]);\n  var showSend = useMemoOne(function () {\n    return alwaysShowSend || text && text.trim().length > 0;\n  }, [alwaysShowSend, text]);\n\n  if (!showSend) {\n    return null;\n  }\n\n  return _jsx(TouchableOpacity, _objectSpread(_objectSpread({\n    testID: TEST_ID.SEND_TOUCHABLE,\n    accessible: true,\n    accessibilityLabel: \"send\",\n    style: [styles.container, containerStyle],\n    onPress: handleOnPress,\n    accessibilityRole: \"button\",\n    disabled: disabled\n  }, sendButtonProps), {}, {\n    children: _jsx(View, {\n      children: children || _jsx(Text, {\n        style: [styles.text, textStyle],\n        children: label\n      })\n    })\n  }));\n};\nSend.propTypes = {\n  text: PropTypes.string,\n  onSend: PropTypes.func,\n  label: PropTypes.string,\n  containerStyle: StylePropType,\n  textStyle: StylePropType,\n  children: PropTypes.element,\n  alwaysShowSend: PropTypes.bool,\n  disabled: PropTypes.bool,\n  sendButtonProps: PropTypes.object\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","useCallbackOne","useMemoOne","Color","StylePropType","TEST_ID","styles","StyleSheet","create","container","height","justifyContent","text","color","defaultBlue","fontWeight","fontSize","backgroundColor","backgroundTransparent","marginBottom","marginLeft","marginRight","Send","containerStyle","children","textStyle","label","alwaysShowSend","disabled","sendButtonProps","onSend","handleOnPress","trim","showSend","length","SEND_TOUCHABLE","propTypes","string","func","element","bool","object"],"sourceRoot":"","sources":["../src/Send.tsx"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}